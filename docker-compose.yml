version: '3.8'
services:
  #node:
  #  build:
  #    context: .
  #    dockerfile: Dockerfile-dev
  #  container_name: app
  #  restart: unless-stopped
  #  networks:
  #    - my-network
  #  ports:
  #    - 1337:1337
  #  depends_on:
  #    postgresql:
  #      condition: service_healthy
  #    redis:
  #      condition: service_healthy
        
  db:
    image: postgis/postgis
    restart: always
    ports: 
      - "5432:5432"
    env_file:
        - .env
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
  #pgadmin:
  #  image: dpage/pgadmin4:8.1
  #  restart: unless-stopped
  #  volumes:
  #    - pgadmin-data:/var/lib/pgadmin
  #env_file:
      #- .env-dev
  #  ports:
  #    - 8002:80
 
  #redis:
  #  container_name: redis
  #  hostname: redis
  #  image: redis/redis-stack:7.2.0-v6
  #  restart: unless-stopped
  #  environment:
  #    REDIS_ARGS: '--requirepass ${REDIS_PASSWORD}'
  #  ports:
  #    - ${REDIS_PORT}:6379
  #  networks:
  #    - my-network
  #  healthcheck:
  #    test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
  #    interval: 10s
  #    timeout: 5s
  #    retries: 5
    
      
  #redis-commander:
  #  container_name: redis-commander
  #  hostname: redis-commander
  #  image: rediscommander/redis-commander:latest
  #  restart: always
  #  env_file:
  #    - .env
  #  ports:
  #  - "8081:8081"
  #  depends_on:
  #    - redis
  #  networks:
  #    - my-network



  minio:
    image: bitnami/minio
    env_file:
    - .env
    ports:
      - '9000:9000'
      - '9001:9001'
    networks:
      - minionetwork
    volumes:
      - 'minio_data:/data'

  kafka:
      image: bitnami/kafka
      env_file:
      - .env
      ports:
        - "9092:9092"

  kafka-ui:
    image: provectuslabs/kafka-ui
    ports:
      - "8080:8080"
    env_file:
      - .env
    restart: "always"
    depends_on:
      - kafka

  #cassandra:
  #  image: "cassandra:latest"  # cassandra:4.1.3
  #  container_name: "cassandra"
  #  ports:
  #    - 7000:7000
  #    - 9042:9042
  #  env_file:
  #    - .env
  #  volumes:
  #    - cassandra_data:/var/lib/cassandra:rw
  #  restart:
  #    on-failure
  #  healthcheck:
  #    test: ["CMD-SHELL", "nodetool status"]
  #    interval: 2m
  #    start_period: 2m
  #    timeout: 10s
  #    retries: 3

volumes:
  pg_data:
#  pgadmin-data:
  minio_data:
    driver: local

networks:
  my-network:
    driver: bridge
  minionetwork:
    driver: bridge